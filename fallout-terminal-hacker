#!/usr/bin/env perl

use strict;
use warnings;

my $words = get_words();

my %words = map { $_, 1 } @$words;
my %guesses;

while (remaining_words() > 1) {
    my $guess = get_guess();
    last unless $guess;
    my $count = get_count();
    filter_words($guess, $count);
}

print_remaining();

exit;

1;

sub remaining_words {
    return grep { $words{$_} } @$words;
}

sub print_remaining {
    my $optimal = optimal();
    foreach my $word (remaining_words()) {
        print $word eq $optimal ? '+ ' : '. ',$word,"\n";
    }
}

# find word with highest number of intersecting counts
# i.e., guess result will eliminate greatest number of others
# TODO: is this sound?
sub optimal {
    my @remains = remaining_words();
    my $grid = [];
    # compare all remaining words
    for (my $i = 0; $i <= $#remains; $i++) {
        for (my $j = 0; $j <= $#remains; $j++) {
            $grid->[$i][$j] = compare_words($remains[$i], $remains[$j]);
        }
    }
    #use Data::Dumper;
    #warn Dumper $grid;
    my %intersects;
    for (my $i = 0; $i <= $#remains; $i++) {
        my %tmp = map { $_, 1 } @{$grid->[$i]};
        $intersects{$remains[$i]} = scalar keys %tmp;
    }
    #warn Dumper \%intersects;
    my($optimal) = sort { $intersects{$b} <=> $intersects{$a} } keys %intersects;
    return $optimal;
}

sub get_input {
    my $prompt = shift;
    print $prompt,"\n" if $prompt;
    print "> ";
    my $input = <STDIN>;
    chomp $input;
    return $input;
}

sub get_words {
    print "enter words, one per line, empty word when done: \n";
    my @words;
    while ( 1 ) {
        my $word = get_input();
        if ( $word ) {
            push @words, $word;
        }
        else {
            last;
        }
    }
    return \@words;
}

sub get_guess {
    print_remaining();
    my $guess = get_input('which word was guessed?');
    $guess = optimal() if $guess eq '+';
    return $guess;
}

sub get_count {
    my $count = get_input('what was the count?');
}

sub filter_words {
    my ($guess, $count) = @_;
    $guesses{$guess} = $count;
    delete $words{$guess};
    foreach my $word (remaining_words()) {
        my $compare = compare_count($word, $guess, $count);
        unless ($compare) {
            delete $words{$word};
        }
    }
}

sub compare_count {
    my($word, $guess, $count) = @_;
    my $match_count = compare_words($word, $guess);
    return $match_count == $count ? 1 : 0;
}

our %compare_memo;
sub compare_words {
    my ($word, $guess) = @_;
    return $compare_memo{$word}{$guess} if defined $compare_memo{$word}{$guess};
    my @word = split(//,$word);
    my @guess = split(//, $guess);
    my $matches = 0;
    for (my $i = 0; $i <= $#word; $i++) {
        $matches++ if $word[$i] eq $guess[$i];
    }
    $compare_memo{$word}{$guess} = $matches;
    return $matches;
}
